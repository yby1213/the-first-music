<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.first.dao.UserMapper">


<select id="getUserByNo" resultType="User">
    select * from music_user where id=#{id}
</select>

    <select id="getUserByName" parameterType="String" resultType="User">
    select * from music_user where userName=#{userName}
</select>

    <select id="userLogin" parameterType="String" resultType="User">
    select * from music_user where userName=#{userName} and userPwd=#{userPwd}
</select>

<update id="modify" parameterType="User">
    update music_user set userName=#{userName},phone=#{phone},userPic=#{userPic},userPwd=#{userPwd}
    where id=#{id}
</update>


    <select id="getUserCount" resultType="Integer">
        select COUNT(*) from music_user
    </select>

    <select id="getUserListByPage" resultType="User">
        select * from music_user where
        <if test="keyword!='%null%' ">
            ( userName like #{keyword}
            or phone like #{keyword}
            )and
        </if>
         userRole = #{defaultRole} and id!=1
        order by id desc limit  #{page}, #{limit}
    </select>

    <select id="loginUserByPassword" resultType="User">
        select * from music_user where
        (phone= #{keyword} or userName= #{keyword})
        and  userPwd=#{userPwd} and userRole=#{userRole}  limit 0,1
    </select>

    <select id="getUserOne" parameterType="String" resultType="User">
        select * from music_user where
        (phone= #{keyword} or userName= #{keyword})  limit 0,1
    </select>

    <update id="modifyPasswordByAdmin"  >
        UPDATE music_user SET userPwd = #{newPassword} WHERE phone = #{phone} and userPwd= #{password}
    </update>

    <update id="modifyUserByAdmin">
        update music_user set userName= #{userName},userRole= #{userRole},phone= #{phone},
	    userPic= #{userPic} where id= #{id}
    </update>

    <insert id="addUserByAdmin">
    insert into music_user(id,userName,userRole,phone,creationDate,userPic,userPwd)
    select null, #{userName},#{userRole},#{phone},NOW(),#{userPic},#{userPwd} from DUAL
    where not exists (select phone from music_user where phone = #{phone} or userName= #{userName} )
</insert>

    <delete id="delCommentByuserId" parameterType="Integer">
        delete from music_comment  where user_id= #{user_id}
    </delete>

    <delete id="delUserByuserId" parameterType="Integer">
        delete from music_user where id= #{id}
    </delete>

    <select id="getPayListByUserId" resultType="Integer" parameterType="Pay" >
        select * from music_pay where user_id =#{user_id} order by id desc limit 0,1
    </select>

</mapper>